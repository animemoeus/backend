name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: ["master", "main"]
    paths-ignore: ["docs/**"]

  push:
    branches: ["master", "main"]
    paths-ignore: ["docs/**"]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      # Consider using pre-commit.ci for open source project
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  # With no caching at all the entire ci process takes 4m 30s to complete!
  pytest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Update Environment Variable
        run: |
          echo "DISCORD_REFRESH_URL=${{ secrets.DISCORD_REFRESH_URL }}" >> .envs/.local/.django
          echo "DISCORD_REFRESH_URL_BOT_TOKEN=${{ secrets.DISCORD_REFRESH_URL_BOT_TOKEN }}" >> .envs/.local/.django

          echo "INSTAGRAM_API_URL=${{ secrets.INSTAGRAM_API_URL }}" >> .envs/.local/.django
          echo "INSTAGRAM_API_KEY=${{ secrets.INSTAGRAM_API_KEY }}" >> .envs/.local/.django
          cat .envs/.local/.django

          echo "TWITTER_VIDEO_DOWNLOADER_BOT_TOKEN=${{ secrets.TWITTER_VIDEO_DOWNLOADER_BOT_TOKEN }}" >> .envs/.local/.django
          echo "TWITTER_DOWNLOADER_API_URL=${{ secrets.TWITTER_DOWNLOADER_API_URL }}" >> .envs/.local/.django
          echo "TWITTER_DOWNLOADER_KEY=${{ secrets.TWITTER_DOWNLOADER_KEY }}" >> .envs/.local/.django
          echo "TWITTER_DOWNLOADER_HOST=${{ secrets.TWITTER_DOWNLOADER_HOST }}" >> .envs/.local/.django
          echo "TWITTER_DOWNLOADER_COOKIE=${{ secrets.TWITTER_DOWNLOADER_COOKIE }}" >> .envs/.local/.django
          cat .envs/.local/.django

          echo "WIREGUARD_HOST=localhost" >> .env
          echo "WIREGUARD_PASSWORD=password" >> .env
          cat .env

      - name: Build the Stack
        run: docker compose -f local.yml build

      - name: Run DB Migrations
        run: docker compose -f local.yml run --rm django python manage.py migrate

      - name: Run Django Tests
        run: docker compose -f local.yml run django pytest

      - name: Tear down the Stack
        run: docker compose -f local.yml down
